{
  "alias": "video/3280/designing-a-python-integrated-query-language-for",
  "category": "PyCon APAC 2014",
  "copyright_text": "youtube",
  "description": "Python becomes increasingly popular in the domain of big data analysis.\nMany big data frameworks such as Hadoop now support Python to some\nextent. PySociaLite is a new big data framework developed at Stanford.\nIt is designed from beginning to be fully integrated into Python. In\nPySociaLite, SQL-like queries (called SociaLite) are directly embedded\nwithin Python code; the queries can access Python variables and\nfunctions, so there is full inter-operation between SociaLite and\nPython.\n\nIn this talk, I will give a brief overview of SociaLite, then mainly\npresent the techniques for the integration of SociaLite into Python.\nSociaLite builds on top of well-known programming concepts -- tables and\nrelational operations -- and it allows users to declare distributed\ntables to perform, for example, distributed join operations. For the\nintegration of SociaLite into Python, we basically extend Jython\ninterpreter to process embedded SociaLite queries. More specificaly, we\nuse PyParsing to recognize SociaLite queries and re-write the queries\ninto Java function calls. We also use lesser-known Python features, such\nas import hooks to process SociaLite queries within imported modules. To\naccess Python functions within SociaLite, Jython interpreter instance\n(from which SociaLite queries are executed) is passed to SociaLite\nruntime system, and used to lookup and access Python functions. For the\ndistributed execution, Python functions are serialized (as well as its\nPyCode object) and copied to cluster machines.\n\nTime permitting, I will give a demo of PySociaLite; SociaLite queries\nwill be executed interactively within (extended) Jython shell and\ndemonstrate the inter-operation between SociaLite and Python.\n\nAbout the speaker\n\nJiwon Seo is a PhD student in Stanford university, studying parallel\nquery language for data analysis. He contributed to Python in various\nways; for example, he implemented PEP 289 (Generator Expressions) and\nPEP 3102 (Keyword-Only Arguments).\n\nHe designed and implemented a parallel and distributed query language,\ncalled SociaLite. The SociaLite compiler generates efficient\nparallel/distributed code from user queries. SociaLite queries can be\nembedded in Python programs, allowing users to enjoy flexibility of\nPython and efficiency of SociaLite. More information is in\nhttp://socialite-lang.github.io/\n",
  "duration": null,
  "id": 3280,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-06-27",
  "related_urls": [
    "http://socialite-lang.github.io/"
  ],
  "slug": "designing-a-python-integrated-query-language-for",
  "speakers": [
    "Jiwon Seo"
  ],
  "summary": "",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/wxlq0HkE3zw/hqdefault.jpg",
  "title": "Designing a Python-integrated query language for distributed computing",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=wxlq0HkE3zw"
    }
  ]
}
