{
  "description": "Nickolas Grigoriadis\nhttps://2017.za.pycon.org/talks/12/\nManaging your code is like managing anything else.  \nTo take ~~back~~ control of your code, you need to **measure** everything you can!\n\nThis talk is about my experience of wresting an unruly codebase into a well behaved one.  \nWell, better behaved, at least...\n\nIn this talk I'll cover the following, and how they affect your Python application:\n\n  * **Complexity**  \n_and how it differs from ease_\n  * **Risk**  \n_not all code is equally important_\n  * **Static analysis**  \n_don't fear the `pylint`, whilst `typing` \\+ `mypy` can save the day_\n  * **Testing**  \n_why &amp; when to write tests (`hypothesis` is **awesome**)_\n  * **Formally design your internal data format**  \n_whilst it seems obvious, internal data formats are often left unchecked_\n  * **Profiling**  \n_a good programmer with a profiler is better than one without_",
  "recorded": "2017-10-06",
  "related_urls": [
    {
      "label": "talk slides",
      "url": "https://speakerdeck.com/pyconza/taking-back-control-of-your-code-by-nickolas-grigoriadis"
    }
  ],
  "speakers": [
    "Nickolas Grigoriadis"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/GtZgpNlaabI/hqdefault.jpg",
  "title": "Taking back control of your code",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=GtZgpNlaabI"
    },
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyconza2017-Taking_back_control_of_your_code"
    }
  ]
}
