{
  "alias": "video/4049/using-benchmarks-to-understand-how-wsgi-servers-w",
  "category": "PyCon AU 2015",
  "copyright_text": "creativeCommon",
  "description": "During the development of a Python web application the inbuilt\ndevelopment web server provided by the web framework is often what is\nused. When moving to a production environment, one has to choose a more\ncapable production grade WSGI deployment mechanism. Which of the various\nWSGI servers available is going to be the most suitable is going to\ndepend on a range of criteria related to your specific web applications\nrequirements.\n\nUnfortunately, rather than look at the bigger picture and what would be\nthe most suitable across such criteria, many people will simply rush to\ntrying to run an overly simplistic benchmark on the various WSGI servers\nand make the decision based purely on perceptions of whether one WSGI\nserver is faster than the alternatives. Worse, they don't even attempt\nto do the benchmarks themselves and instead rely on benchmarks published\non some public blog site.\n\nSuch public benchmarks as are available are often flawed, or cover such\na narrow use case as to in no way be relevant to that users own specific\nsituation.\n\nA further problem with such benchmarks is that they try and evaluate the\nperformance of a WSGI server as if they are a black box. As such, there\nis no attempt to try and work out what is actually going on within the\nWSGI server and why it is exhibiting the behaviour it is.\n\nThe purpose of this talk is to explore a number of different micro\nbenchmarks, using them to work out what is actually going on within a\nWSGI server when they are run. The analysis will delve down into, and\nlook at the different ways that WSGI servers are implemented and\ndeployed. The behaviour under the different benchmarks will be\ndetermined using fine grained metrics captured from hooking\ninstrumentation into the WSGI servers themselves.\n\nAs there are many factors which could be investigated, the talk cannot\nbe entirely comprehensive, but selected benchmarks drawing from a sub\nset of the following areas will be presented:\n\n-  multithreading\n-  CPU intensive tasks\n-  long running requests\n-  combination of short and long running requests\n-  large request content uploads\n-  large amounts of response content\n-  blocking on back end services\n-  slow HTTP clients\n\nThe tests will look not just at response times, but also server capacity\nutilisation, CPU and memory utilisation.\n\nAlthough the discussion will primarily revolve around WSGI servers, a\ncomparison will also be made for some tests were one instead to use an\nASYNC web application framework alone, or in conjunction with a WSGI\nadapter.\n\nTo conclude, an attempt will be made to summarise what you should be\nlooking at in a WSGI server to determine if it is the right choice for\nyour use case.\n",
  "duration": null,
  "id": 4049,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2015-08-03",
  "slug": "using-benchmarks-to-understand-how-wsgi-servers-w",
  "speakers": [
    "Graham Dumpleton"
  ],
  "summary": "",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/SGleKfigMsk/hqdefault.jpg",
  "title": "Using benchmarks to understand how WSGI servers work",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=SGleKfigMsk"
    }
  ]
}
