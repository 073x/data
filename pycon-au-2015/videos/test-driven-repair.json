{
  "alias": "video/3949/test-driven-repair",
  "category": "PyCon AU 2015",
  "copyright_text": "creativeCommon",
  "description": "\u201cit is impossible BY DEFINITION to do Test-Driven Development after the\ncode is written.\u201d \u2014 Tim Ottinger, author of \u2018Clean Code\u2019, on Twitter\n[1].\n\nAutomated testing is one of the most important tools in the modern\nprogramming toolbox: good tests help you find regressions early, and\nhelp you make sure your code is right before it ships. Test-driven\ndevelopment is a great way to make sure your software is up to\nspecification before you start work. Even better, it makes sure your\nsoftware\u2019s architecture is amenable to writing tests from day 1.\n\nSo what happens when you find yourself working on code where automated\ntesting took a back seat to being shipped? Chances are you\u2019ll have a sea\nof bugs, strung together in a structure where writing simple unit tests\njust isn\u2019t going to happen.\n\nBroken code is a support burden, and if it\u2019s in production, you\u2019ve got\nno choice but to make things work. Luckily, automated testing isn\u2019t a\nlost cause here!\n\nIn this talk, we\u2019ll look at how to approach automated testing on\nlate-stage, or even production code\u2026 or in any situation when you don\u2019t\nhave the luxury of starting with a test-driven structure. We\u2019ll look at\ntechniques that I\u2019ve used to analyse faults in existing code, and how to\ntranslate those into tests, and how to use that to fix bugs.\n\nIn particular, we\u2019ll look at:\n\n-  Tooling and metrics to help you decide what code to test, and how to\n   measure progress when you\u2019re writing tests\n-  Approaches to constructing test cases for old code, including using\n   data-driven approaches, and approaches based on requirements\n   specifications\n-  Granularity \u2014 making tests on old code granular enough is difficult,\n   so we\u2019ll look at the trade-offs between unit and integration tests on\n   old code, and ways to make integration-level tests granular enough to\n   make results reliable\n\nWe\u2019ll see that testing old code is both achievable, and actually a\nworthwhile exercise. You\u2019ll find bugs. You\u2019ll increase quality. You\u2019ll\nmake your code more maintainable! Do try it!\n\n[1] https://twitter.com/tottinge/status/544632253205475329\n",
  "duration": null,
  "id": 3949,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2015-08-04",
  "related_urls": [
    "https://twitter.com/tottinge/status/544632253205475329"
  ],
  "slug": "test-driven-repair",
  "speakers": [
    "Christopher Neugebauer"
  ],
  "summary": "",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/1i5leCslA4g/hqdefault.jpg",
  "title": "Test-Driven Repair",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=1i5leCslA4g"
    }
  ]
}
