{
  "alias": "video/3336/firedrake-a-high-level-portable-finite-element-c",
  "category": "EuroScipy 2014",
  "copyright_text": "youtube",
  "description": "In an ideal world, scientific applications are computationally\nefficient, maintainable, composable and allow scientists to work very\nproductively. In this talk we demonstrate that these goals are\nachievable for a specific application domain by choosing suitable\ndomain-specific abstractions implemented in Python that encapsulate\ndomain knowledge with a high degree of expressiveness.\n\nWe present `Firedrake <http://firedrakeproject.org/>`__, a high-level\nPython framework for the portable solution of partial differential\nequations on unstructured meshes with the finite element method widely\nused in science and engineering. Firedrake is built on top of\n`PyOP2 <http://op2.github.io/PyOP2>`__, a domain-specific language\nembedded in Python for parallel mesh-based computations. Finite element\nlocal assembly operations execute the same computational kernel for\nevery element of the mesh and is therefore efficiently parallelisable.\n\nFiredrake allows scientists to describe variational forms and\ndiscretisations for finite element problems symbolically in a notation\nvery close to the maths using the Unified Form Language\n`UFL <https://bitbucket.org/fenics-project/ufl/>`__ from the `FEniCS\nproject <http://fenicsproject.org/>`__. Variational forms are translated\ninto computational kernels by the FEniCS Form Compiler\n`FFC <https://bitbucket.org/fenics-project/ffc/>`__. Numerical linear\nalgebra is delegated to PETSc, leveraged via its petsc4py interface.\n\nPyOP2 abstracts away the performance-portable parallel execution of\nthese kernels on a range of hardware architectures, targeting multi-core\nCPUs with OpenMP and GPUs and accelerators with PyCUDA and PyOpenCL and\ndistributed parallel computations with mpi4py. Backend-specific code\ntailored to each specific computation is generated, just-in-time\ncompiled and efficiently scheduled for parallel execution at runtime.\n\nDue to the composability of the Firedrake and PyOP2 abstractions,\noptimised implementations for different hardware architectures can be\nautomatically generated without any changes to a single high-level\nsource. Performance matches or exceeds what is realistically attainable\nby hand-written code. Both projects are open source and developed at\nImperial College London.\n",
  "duration": null,
  "id": 3336,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-10-22",
  "related_urls": [
    "http://fenicsproject.org/",
    "http://firedrakeproject.org/",
    "http://op2.github.io/PyOP2",
    "https://bitbucket.org/fenics-project/ffc/",
    "https://bitbucket.org/fenics-project/ufl/"
  ],
  "slug": "firedrake-a-high-level-portable-finite-element-c",
  "speakers": [
    "Florian Rathgeber"
  ],
  "summary": "",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/VdzE0ZBAa-Q/hqdefault.jpg",
  "title": "Firedrake: a High-level Portable Finite Element Computation Framework",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=VdzE0ZBAa-Q"
    }
  ]
}
