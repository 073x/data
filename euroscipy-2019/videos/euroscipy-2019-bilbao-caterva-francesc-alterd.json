{
  "description": "EuroSciPy 2019 Bilbao \nSeptember 4, Wednesday \nMitxelena. Talk. 15.15\n\nCaterva: A Compressed And Multidimensional Container For Big Data\nFrancesc Alted\n\nCaterva: A Compressed And Multidimensional Container For Big Data\n\nCaterva is a C library on top of C-Blosc2 that implements a simple multidimensional container for compressed binary data. It adds the capability to store, extract, and transform data in these containers, either in-memory or on-disk.\n\nWhile there are several existing solutions for this scenario (HDF5 is one of the most known), Caterva brings novel features that, when taken toghether, set it appart from them:\n\n    Leverage important features of C-Blosc2. C-Blosc2 is the next generation of the well-know, high performance C-Blosc compression library (see below for a more in-depth description).\n\n    Fast and seamless interface with the compression engine. While in other solutions compression seems an after-thought and can implies several copies of buffers internally, the interface of Caterva and C-Blosc2 (its internal compression engine) is meant to be as direct as possible minimizing copies and hence, increasing performance.\n\n    Both in-memory and on-disk paradigms are supported the same way. This allows for using the same API for data that can be either in-memory or on-disk.\n\n    Support for a plain buffer data layout. This allows for essentially no-copy data sharing among existing libraries (NumPy), allowing to use existing functionality to be used directly in Caterva without loosing performance.\n\nAlong this features, there is an important 'mis-feature': Caterva is type-less. Lacking the notion of data type means that Caterva containers are not meant to be used in computations directly, but rather in combination with other higher-level libraries. While this can be seen as a drawback, it actually favors simplicity and leaves up to the user the addition of the types that he is more interested in, which is far more flexible than typed-aware libraries (HDF5, NumPy and many others).\n\nDuring our talk, we will describe all these Caterva features by using cat4py, a Python wrapper for Caterva. Among the points to be discussed would be:\n\n    Introduction to the main features of Caterva.\n\n    Description of the basic data container and its usage.\n\n    Short discussion of different use cases:\n\n    Create and fill high dimensional arrays.\n    Get multi-dimensional slices out of the arrays.\n    How different compression codecs and filters in the pipeline affect store/retrieval performance.\n\nWe have been using Caterva in one of our internal projects for several months now, and we are pretty happy with the flexibility and easy-of-use that it brings to us. This is why we decided to open-source it in the hope that it would benefit others, but also that others may help us in developing it further ;-)\nAbout C-Blosc and C-Blosc2\n\nC-Blosc is a high performance compressor optimized for binary data. It has been designed to transmit data to the processor cache faster than the traditional, non-compressed, direct memory fetch approach via a memcpy() OS call. Blosc is the first compressor (that we are aware of) that is meant not only to reduce the size of large datasets on-disk or in-memory, but also to accelerate memory-bound computations.\n\nC-Blosc2 is the new major version of C-Blosc, with a revamped API and support for new compressors and new filters (data transformations), including filter pipelining, that is, the capability to apply different filters during the compression pipeline, allowing for more adaptability to the data to be compressed. Dictionaries are also introduced, allowing better handling of redundancies among independent blocks and generally increasing compression ratio and performance. Last but not least, there are new data containers that are meant to overcome the 32-bit limitation of the original C-Blosc. Furthermore, the new data containers are available in various formats, including in-memory and on-disk implementations.\nAbstract as a tweet \u2013 Caterva is a library on top of Blosc2 that implements a simple multidimensional container for compressed binary data. It adds the capability to store, extract, and transform data in these containers, either in-memory or on-disk. \n\nDomains \u2013 Big Data, Scientific data flow and persistence, Vector and array manipulation  \nGit \u2013 https://github.com/Blosc/cat4py \nDomain Expertise \u2013 some \nPython Skill Level \u2013 basic \nGit \u2013 https://github.com/Blosc/Caterva",
  "duration": 1600,
  "published_at": "2019-10-27T17:07:02.000Z",
  "recorded": "",
  "speakers": [],
  "thumbnail_url": "https://i.ytimg.com/vi/Vk2VFABjYBQ/hqdefault.jpg",
  "title": "EuroSciPy 2019 Bilbao - Caterva - Francesc Alterd",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Vk2VFABjYBQ"
    }
  ]
}