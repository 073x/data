{
  "copyright_text": "Standard YouTube License",
  "description": "PyData Amsterdam 2016\n\nSystems based on collaborative filtering are the workhorse of recommender systems. They yield great results when abundant data is available. Unfortunately, their performance suffers when encountering new items or new users.\n\nIn this talk, I'm going to talk about hybrid approaches that alleviate this problem, and introduce a mature, high-performance Python recommender package called LightFM.\n\nIntroduction to collaborative filtering.\nWorks well when data is abundant (MovieLens, Amazon), but poorly when new users and items are common.\nIntroduce hybrid approaches: metadata embeddings.\nThis is implemented in LightFM.\nLightFM has a couple of tricks up its sleeve: multicore training, training with superior ranking losses.\n\nSlides available here: https://speakerdeck.com/maciejkula/hybrid-recommender-systems-at-pydata-amsterdam-2016",
  "duration": 2081,
  "language": "eng",
  "recorded": "2016-03-26",
  "related_urls": [
    "https://speakerdeck.com/maciejkula/hybrid-recommender-systems-at-pydata-amsterdam-2016"
  ],
  "speakers": [
    "Maciej Kula"
  ],
  "tags": [
    "lightfm"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/EgE0DUrYmo8/maxresdefault.jpg",
  "title": "Hybrid Recommender Systems in Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=EgE0DUrYmo8"
    }
  ]
}
